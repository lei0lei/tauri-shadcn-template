/* automatically generated by rust-bindgen 0.71.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const INVALID_VALUE: u32 = 888888;
pub const CM_MAX_GROUP: u32 = 2;
pub const PARAM_SAMPLE_STATE: &[u8; 13] = b"sample_state\0";
pub const PARAM_SENSOR_GAIN: &[u8; 12] = b"sensor_gain\0";
pub const PARAM_EXPOSURE_TIME: &[u8; 14] = b"exposure_time\0";
pub const PARAM_AUTO_EXP: &[u8; 9] = b"auto_exp\0";
pub const PARAM_MAX_AUTO_EXP: &[u8; 13] = b"max_auto_exp\0";
pub const PARAM_AUTO_EXP_CHANNEL: &[u8; 17] = b"auto_exp_channel\0";
pub const PARAM_AUTO_LIGHT: &[u8; 11] = b"auto_light\0";
pub const PARAM_AUTO_LIGHT_MODE: &[u8; 16] = b"auto_light_mode\0";
pub const PARAM_LIGHT_VALUE: &[u8; 12] = b"light_value\0";
pub const PARAM_CONNECT_STATE: &[u8; 14] = b"connect_state\0";
pub const PARAM_ACTIVE_CHANNEL: &[u8; 15] = b"active_channel\0";
pub const PARAM_CONTROLLER_IP: &[u8; 14] = b"controller_ip\0";
pub const PARAM_CONTROLLER_PORT: &[u8; 16] = b"controller_prot\0";
pub const PARAM_CONTROLLER_MAC: &[u8; 15] = b"controller_mac\0";
pub const PARAM_SDK_VERSION: &[u8; 12] = b"sdk_version\0";
pub const PARAM_CONTROLER_VERSION: &[u8; 18] = b"controler_version\0";
pub const PARAM_SENSOR_SN: &[u8; 10] = b"sensor_sn\0";
pub const PARAM_CONTROLER_SN: &[u8; 13] = b"controler_sn\0";
pub const PARAM_FRAME_RATE_CONTROL: &[u8; 19] = b"frame_rate_control\0";
pub const PARAM_FRAME_RATE: &[u8; 11] = b"frame_rate\0";
pub const PARAM_RT_FRAME_RATE: &[u8; 14] = b"rt_frame_rate\0";
pub const PARAM_TRIGGER_MODE: &[u8; 13] = b"trigger_mode\0";
pub const PARAM_TRIGGER_SYNC_OUT: &[u8; 17] = b"trigger_sync_out\0";
pub const PARAM_ENCODER_DIVISION: &[u8; 17] = b"encoder_division\0";
pub const PARAM_ENCODER_INPUT_MODE: &[u8; 19] = b"encoder_input_mode\0";
pub const PARAM_ENCODER_WORKING_MODE: &[u8; 21] = b"encoder_working_mode\0";
pub const PARAM_ENCODER_CLEAR_COUNT: &[u8; 20] = b"encoder_clear_count\0";
pub const PARAM_ENCODER_CHANNEL: &[u8; 16] = b"encoder_channel\0";
pub const PARAM_MOVING_AVG_FILTER: &[u8; 18] = b"moving_avg_filter\0";
pub const PARAM_CLR_MOVING_AVG_FILTER_CNT: &[u8; 26] = b"clr_moving_avg_filter_cnt\0";
pub const PARAM_MOVING_MEDIAN_FILTER: &[u8; 21] = b"moving_median_filter\0";
pub const PARAM_CLR_MOVING_MEDIAN_FILTER_CNT: &[u8; 29] = b"clr_moving_median_filter_cnt\0";
pub const PARAM_KALMAN_FILTER_EN: &[u8; 17] = b"kalman_filter_en\0";
pub const PARAM_KALMAN_FILTER_K: &[u8; 16] = b"kalman_filter_k\0";
pub const PARAM_KALMAN_FILTER_THRE: &[u8; 19] = b"kalman_filter_thre\0";
pub const PARAM_KALMAN_FILTER_NUM: &[u8; 18] = b"kalman_filter_num\0";
pub const PARAM_ERROR_FILTER_EN: &[u8; 16] = b"error_filter_en\0";
pub const PARAM_ERROR_FILTER_CNT: &[u8; 17] = b"error_filter_cnt\0";
pub const PARAM_SELECT_SIGNAL: &[u8; 14] = b"select_signal\0";
pub const PARAM_SIGNAL_SATURATION: &[u8; 18] = b"signal_saturation\0";
pub const PARAM_MAIN_SIGNAL_INDEX: &[u8; 18] = b"main_signal_index\0";
pub const PARAM_CHANNEL_MEASURE_MODE: &[u8; 21] = b"channel_measure_mode\0";
pub const PARAM_CHANNEL_MULT_DIS: &[u8; 17] = b"channel_mult_dis\0";
pub const PARAM_CHANNEL_ABS_MODE: &[u8; 17] = b"channel_abs_mode\0";
pub const PARAM_CHANNEL_REVERSE_VALUE: &[u8; 21] = b"channel_revere_value\0";
pub const PARAM_CHANNEL_OFFSET: &[u8; 15] = b"channel_offset\0";
pub const PARAM_SIGNAL_DETECT_THRE: &[u8; 19] = b"signal_detect_thre\0";
pub const PARAM_SIGNAL_CAL_RATIO: &[u8; 17] = b"signal_cal_ratio\0";
pub const PARAM_SAVE_ZERO_POSITION: &[u8; 19] = b"save_zero_position\0";
pub const PARAM_CLEAR_ZERO_POSITION: &[u8; 20] = b"clear_zero_position\0";
pub const PARAM_AUTO_SIGNAL_DETECT: &[u8; 19] = b"auto_signal_detect\0";
pub const PARAM_SIGNAL_DETECT_SENSITIVITY: &[u8; 26] = b"signal_detect_sensitivity\0";
pub const PARAM_SIGNAL_DETECT_NUM: &[u8; 18] = b"signal_detect_num\0";
pub const PARAM_SIGNAL_MINI_POINTS: &[u8; 19] = b"signal_mini_points\0";
pub const PARAM_SIGNAL_SMOOTH: &[u8; 14] = b"signal_smooth\0";
pub const PARAM_SIGNAL_SORT: &[u8; 12] = b"signal_sort\0";
pub const PARAM_SIGNAL_DATA_OUTPUT: &[u8; 19] = b"signal_data_output\0";
pub const PARAM_CACHE_SIZE: &[u8; 11] = b"cache_size\0";
pub const PARAM_CACHE_DATA_CNT: &[u8; 15] = b"cache_data_cnt\0";
pub const PARAM_CACHE_CLEAR: &[u8; 12] = b"cache_clear\0";
pub const PARAM_CACHE_THRE: &[u8; 11] = b"cache_thre\0";
pub const PARAM_ANALOG_VOL_OUTPUT: &[u8; 18] = b"analog_vol_output\0";
pub const PARAM_RSXXX_PROTOCOL: &[u8; 15] = b"rsxxx_protocol\0";
pub const PARAM_RSXXX_BAUDRATE: &[u8; 15] = b"rsxxx_baudrate\0";
pub const PARAM_RSXXX_PARITY: &[u8; 13] = b"rsxxx_parity\0";
pub const PARAM_RSXXX_DATA_FORMAT: &[u8; 18] = b"rsxxx_data_format\0";
pub const PARAM_RSXXX_SELECT: &[u8; 13] = b"rsxxx_select\0";
pub const PARAM_DOUBLE_CHANNEL_MODE: &[u8; 20] = b"double_channel_mode\0";
pub const PARAM_DOUBLE_CHANNEL_AL_MODE: &[u8; 23] = b"double_channel_al_mode\0";
pub const PARAM_DOUBLE_CHANNEL_REVERSE_DIS: &[u8; 27] = b"double_channel_reverse_dis\0";
pub const PARAM_DOUBLE_CHANNEL_CAL_MODE: &[u8; 24] = b"double_channel_cal_mode\0";
pub const PARAM_DOUBLE_CHANNEL_CAL_COEF_A: &[u8; 26] = b"double_channel_cal_coef_a\0";
pub const PARAM_DOUBLE_CHANNEL_CAL_COEF_B: &[u8; 26] = b"double_channel_cal_coef_b\0";
pub const PARAM_DOUBLE_CHANNEL_CAL_COEF_C: &[u8; 26] = b"double_channel_cal_coef_c\0";
pub const PARAM_TRIGGER_PASS_DEBUG: &[u8; 19] = b"trigger_pass_debug\0";
pub const PARAM_CLEAR_TRIGGER_PASS_FLAG: &[u8; 24] = b"clear_trigger_pass_flag\0";
pub const PARAM_SUB_BACKGROUND_LIGHT: &[u8; 21] = b"sub_background_light\0";
pub const PARAM_SYNC_IN0_FUNC: &[u8; 14] = b"sync_in0_func\0";
pub const PARAM_SYNC_IN1_FUNC: &[u8; 14] = b"sync_in1_func\0";
pub const PARAM_EX_TRIGGER_DEBOUNCE: &[u8; 20] = b"ex_trigger_debounce\0";
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type DeviceHandle_t = ::std::os::raw::c_int;
pub const EventTypeDef_EventType_DataRecv: EventTypeDef = 0;
pub type EventTypeDef = ::std::os::raw::c_int;
pub const ConfocalDataRid_t_RID_RESULT: ConfocalDataRid_t = 0;
pub const ConfocalDataRid_t_RID_IO_BOARD_TEMP_OVERLOAD: ConfocalDataRid_t = 1;
pub const ConfocalDataRid_t_RID_IO_BOARD_FAN_ERROR: ConfocalDataRid_t = 2;
pub const ConfocalDataRid_t_RID_TOLERANCE_ERROR: ConfocalDataRid_t = 3;
pub const ConfocalDataRid_t_RID_SIGNAL_ERROR: ConfocalDataRid_t = 4;
pub const ConfocalDataRid_t_RID_DEVICE_DISCONNECT: ConfocalDataRid_t = 5;
pub const ConfocalDataRid_t_RID_API_CALL_EXCEPTION: ConfocalDataRid_t = 6;
pub const ConfocalDataRid_t_RID_ENCODER_COUNT: ConfocalDataRid_t = 7;
pub const ConfocalDataRid_t_RID_CACHE_REACH_THRES: ConfocalDataRid_t = 8;
pub const ConfocalDataRid_t_RID_IO_ASYNC_EVENT: ConfocalDataRid_t = 9;
pub type ConfocalDataRid_t = ::std::os::raw::c_int;
pub const StatusTypeDef_Status_Succeed: StatusTypeDef = 0;
pub const StatusTypeDef_Status_Others: StatusTypeDef = -1;
pub const StatusTypeDef_Status_Offline: StatusTypeDef = -2;
pub const StatusTypeDef_Status_NoDevice: StatusTypeDef = -3;
pub const StatusTypeDef_Status_DeviceAlreadyOpen: StatusTypeDef = -4;
pub const StatusTypeDef_Status_DeviceNumberExceedLimit: StatusTypeDef = -5;
pub const StatusTypeDef_Status_OpenDeviceFailed: StatusTypeDef = -6;
pub const StatusTypeDef_Status_InvalidPara: StatusTypeDef = -7;
pub const StatusTypeDef_Status_Timeout: StatusTypeDef = -8;
pub const StatusTypeDef_Status_DeviceNotFound: StatusTypeDef = -9;
pub const StatusTypeDef_Status_NotStart: StatusTypeDef = -10;
pub const StatusTypeDef_Status_InvalidState: StatusTypeDef = -11;
pub const StatusTypeDef_Status_OutOfRange: StatusTypeDef = -12;
pub const StatusTypeDef_Status_ParaNotExist: StatusTypeDef = -13;
pub const StatusTypeDef_Status_NoSignal: StatusTypeDef = -14;
pub const StatusTypeDef_Status_FileNotFound: StatusTypeDef = -15;
pub const StatusTypeDef_Status_NoLicense: StatusTypeDef = -16;
pub const StatusTypeDef_Status_LicenseExpired: StatusTypeDef = -17;
pub const StatusTypeDef_Status_LoadLibFailed: StatusTypeDef = -18;
pub const StatusTypeDef_Status_EnvCheckError: StatusTypeDef = -19;
pub const StatusTypeDef_Status_ErrorSDKVersion: StatusTypeDef = -20;
pub const StatusTypeDef_Status_NoParaMatch: StatusTypeDef = -21;
pub const StatusTypeDef_Status_ReadOnlyParam: StatusTypeDef = -22;
pub const StatusTypeDef_Status_HardwareNotSupported: StatusTypeDef = -23;
pub type StatusTypeDef = ::std::os::raw::c_int;
pub const PresetExposureTime_t_ExposureTime_20: PresetExposureTime_t = 20;
pub const PresetExposureTime_t_ExposureTime_50: PresetExposureTime_t = 50;
pub const PresetExposureTime_t_ExposureTime_100: PresetExposureTime_t = 100;
pub const PresetExposureTime_t_ExposureTime_200: PresetExposureTime_t = 200;
pub const PresetExposureTime_t_ExposureTime_400: PresetExposureTime_t = 400;
pub const PresetExposureTime_t_ExposureTime_700: PresetExposureTime_t = 700;
pub const PresetExposureTime_t_ExposureTime_1000: PresetExposureTime_t = 1000;
pub const PresetExposureTime_t_ExposureTime_1500: PresetExposureTime_t = 1500;
pub type PresetExposureTime_t = ::std::os::raw::c_int;
pub const Confocal_TriggerMode_t_Trigger_Internal: Confocal_TriggerMode_t = 0;
pub const Confocal_TriggerMode_t_Trigger_Reserve: Confocal_TriggerMode_t = 1;
pub const Confocal_TriggerMode_t_Trigger_Encoder: Confocal_TriggerMode_t = 2;
pub const Confocal_TriggerMode_t_Trigger_Timing: Confocal_TriggerMode_t = 3;
pub const Confocal_TriggerMode_t_Trigger_SingleShot: Confocal_TriggerMode_t = 4;
pub type Confocal_TriggerMode_t = ::std::os::raw::c_int;
pub const Confocal_EncoderInputMode_t_Mode_1_INC_1: Confocal_EncoderInputMode_t = 0;
pub const Confocal_EncoderInputMode_t_Mode_2_INC_1: Confocal_EncoderInputMode_t = 1;
pub const Confocal_EncoderInputMode_t_Mode_2_INC_2: Confocal_EncoderInputMode_t = 2;
pub const Confocal_EncoderInputMode_t_Mode_2_INC_4: Confocal_EncoderInputMode_t = 3;
pub type Confocal_EncoderInputMode_t = ::std::os::raw::c_int;
pub const Confocal_EncoderWorkingMode_t_Mode_Three_Signal_End: Confocal_EncoderWorkingMode_t = 0;
pub const Confocal_EncoderWorkingMode_t_Mode_Diff_One_Signal_End: Confocal_EncoderWorkingMode_t = 1;
pub type Confocal_EncoderWorkingMode_t = ::std::os::raw::c_int;
pub const Confocal_ExternTriggerSource_t_Sync_In_0: Confocal_ExternTriggerSource_t = 0;
pub type Confocal_ExternTriggerSource_t = ::std::os::raw::c_int;
pub const Confocal_ExtTriggerFunc_t_Trigger_DirectCapture: Confocal_ExtTriggerFunc_t = 0;
pub const Confocal_ExtTriggerFunc_t_Trigger_CacheCapture: Confocal_ExtTriggerFunc_t = 1;
pub const Confocal_ExtTriggerFunc_t_Trigger_Zero: Confocal_ExtTriggerFunc_t = 2;
pub type Confocal_ExtTriggerFunc_t = ::std::os::raw::c_int;
pub const Confocal_AutoLightMode_t_AutoLight_MaxIntensity: Confocal_AutoLightMode_t = 0;
pub const Confocal_AutoLightMode_t_AutoLight_WeakIntensity: Confocal_AutoLightMode_t = 1;
pub type Confocal_AutoLightMode_t = ::std::os::raw::c_int;
pub const AlarmType_t_AlarmType_None: AlarmType_t = 0;
pub const AlarmType_t_AlarmType_UpperLimit: AlarmType_t = 1;
pub const AlarmType_t_AlarmType_LowerLimit: AlarmType_t = 2;
pub const AlarmType_t_AlarmTyp_DeviceDisconnect: AlarmType_t = 3;
pub const AlarmType_t_AlarmType_SignalWeak: AlarmType_t = 4;
pub const AlarmType_t_AlarmType_SignalSaturated: AlarmType_t = 5;
pub const AlarmType_t_AlarmType_TempError: AlarmType_t = 6;
pub const AlarmType_t_AlarmType_FanError: AlarmType_t = 7;
pub type AlarmType_t = ::std::os::raw::c_int;
pub const Confocal_InputPortFunc_t_InputPort_None: Confocal_InputPortFunc_t = 0;
pub const Confocal_InputPortFunc_t_InputPort_ExtTrigger: Confocal_InputPortFunc_t = 1;
pub const Confocal_InputPortFunc_t_InputPort_ExtTriggerCache: Confocal_InputPortFunc_t = 2;
pub const Confocal_InputPortFunc_t_InputPort_Zero: Confocal_InputPortFunc_t = 3;
pub const Confocal_InputPortFunc_t_InputPort_StartSample: Confocal_InputPortFunc_t = 4;
pub const Confocal_InputPortFunc_t_InputPort_StopSample: Confocal_InputPortFunc_t = 5;
pub const Confocal_InputPortFunc_t_InputPort_SampleToggle: Confocal_InputPortFunc_t = 6;
pub const Confocal_InputPortFunc_t_InputPort_ClearCache: Confocal_InputPortFunc_t = 7;
pub const Confocal_InputPortFunc_t_InputPort_EnableCache: Confocal_InputPortFunc_t = 8;
pub const Confocal_InputPortFunc_t_InputPort_DisableCache: Confocal_InputPortFunc_t = 9;
pub const Confocal_InputPortFunc_t_InputPort_R_Start_F_Stop: Confocal_InputPortFunc_t = 10;
pub const Confocal_InputPortFunc_t_InputPort_R_Stop_F_Start: Confocal_InputPortFunc_t = 11;
pub const Confocal_InputPortFunc_t_InputPort_RF_Async_Notice: Confocal_InputPortFunc_t = 12;
pub const Confocal_InputPortFunc_t_InputPort_Async_Notice: Confocal_InputPortFunc_t = 13;
pub type Confocal_InputPortFunc_t = ::std::os::raw::c_int;
pub const IoPortState_t_PortState_Off: IoPortState_t = 0;
pub const IoPortState_t_PortState_On: IoPortState_t = 1;
pub type IoPortState_t = ::std::os::raw::c_int;
pub const Confocal_MeasuretUnit_t_MeasuretUnit_mm: Confocal_MeasuretUnit_t = 0;
pub const Confocal_MeasuretUnit_t_MeasuretUnit_um: Confocal_MeasuretUnit_t = 1;
pub const Confocal_MeasuretUnit_t_MeasuretUnit_inch: Confocal_MeasuretUnit_t = 2;
pub type Confocal_MeasuretUnit_t = ::std::os::raw::c_int;
pub const Confocal_MeasureMode_t_MeasureMode_Distance: Confocal_MeasureMode_t = 0;
pub const Confocal_MeasureMode_t_MeasureMode_Thickness: Confocal_MeasureMode_t = 1;
pub type Confocal_MeasureMode_t = ::std::os::raw::c_int;
pub const Confocal_Gain_t_Gain_1: Confocal_Gain_t = 1;
pub const Confocal_Gain_t_Gain_2: Confocal_Gain_t = 2;
pub const Confocal_Gain_t_Gain_3: Confocal_Gain_t = 3;
pub const Confocal_Gain_t_Gain_4: Confocal_Gain_t = 4;
pub type Confocal_Gain_t = ::std::os::raw::c_int;
pub const Confocal_CooperationMeasureMode_t_CM_Thickness: Confocal_CooperationMeasureMode_t = 0;
pub type Confocal_CooperationMeasureMode_t = ::std::os::raw::c_int;
pub const Confocal_SignalSelect_t_Signal_MaxIntensity: Confocal_SignalSelect_t = 0;
pub const Confocal_SignalSelect_t_Signal_NearEnd: Confocal_SignalSelect_t = 1;
pub const Confocal_SignalSelect_t_Signal_FarEnd: Confocal_SignalSelect_t = 2;
pub type Confocal_SignalSelect_t = ::std::os::raw::c_int;
pub const Confocal_SignalSort_t_Signal_Sort_Index: Confocal_SignalSort_t = 0;
pub const Confocal_SignalSort_t_Signal_Sort_Near_To_Far: Confocal_SignalSort_t = 1;
pub const Confocal_SignalSort_t_Signal_Sort_Far_To_Near: Confocal_SignalSort_t = 2;
pub type Confocal_SignalSort_t = ::std::os::raw::c_int;
pub const COMM_Protocol_Control_Enum_t_Hardware: COMM_Protocol_Control_Enum_t = 0;
pub const COMM_Protocol_Control_Enum_t_Software: COMM_Protocol_Control_Enum_t = 1;
pub type COMM_Protocol_Control_Enum_t = ::std::os::raw::c_int;
pub const COMM_Protocol_Enum_t_RS422_COMM: COMM_Protocol_Enum_t = 0;
pub const COMM_Protocol_Enum_t_RS485_COMM: COMM_Protocol_Enum_t = 1;
pub const COMM_Protocol_Enum_t_RS232_COMM: COMM_Protocol_Enum_t = 3;
pub type COMM_Protocol_Enum_t = ::std::os::raw::c_int;
pub const COMM_BaudRate_Enum_t_BaudRate_9600: COMM_BaudRate_Enum_t = 0;
pub const COMM_BaudRate_Enum_t_BaudRate_19200: COMM_BaudRate_Enum_t = 1;
pub const COMM_BaudRate_Enum_t_BaudRate_38400: COMM_BaudRate_Enum_t = 2;
pub const COMM_BaudRate_Enum_t_BaudRate_57600: COMM_BaudRate_Enum_t = 3;
pub const COMM_BaudRate_Enum_t_BaudRate_115200: COMM_BaudRate_Enum_t = 4;
pub const COMM_BaudRate_Enum_t_BaudRate_230400: COMM_BaudRate_Enum_t = 5;
pub const COMM_BaudRate_Enum_t_BaudRate_460800: COMM_BaudRate_Enum_t = 6;
pub const COMM_BaudRate_Enum_t_BaudRate_921600: COMM_BaudRate_Enum_t = 7;
pub const COMM_BaudRate_Enum_t_BaudRate_Max_Num: COMM_BaudRate_Enum_t = 8;
pub type COMM_BaudRate_Enum_t = ::std::os::raw::c_int;
pub const COMM_Parity_Enum_t_Even: COMM_Parity_Enum_t = 0;
pub const COMM_Parity_Enum_t_Odd: COMM_Parity_Enum_t = 1;
pub const COMM_Parity_Enum_t_Mark: COMM_Parity_Enum_t = 2;
pub const COMM_Parity_Enum_t_Space: COMM_Parity_Enum_t = 3;
pub const COMM_Parity_Enum_t_None: COMM_Parity_Enum_t = 7;
pub type COMM_Parity_Enum_t = ::std::os::raw::c_int;
pub const COMM_Data_Format_Enum_t_ASCII: COMM_Data_Format_Enum_t = 0;
pub const COMM_Data_Format_Enum_t_Hexadecimal: COMM_Data_Format_Enum_t = 1;
pub type COMM_Data_Format_Enum_t = ::std::os::raw::c_int;
pub const DataSetAttribute_t_Attribute_MinMax: DataSetAttribute_t = 0;
pub const DataSetAttribute_t_Attribute_Avg: DataSetAttribute_t = 1;
pub const DataSetAttribute_t_Attribute_PtP: DataSetAttribute_t = 2;
pub const DataSetAttribute_t_Attribute_STD: DataSetAttribute_t = 3;
pub type DataSetAttribute_t = ::std::os::raw::c_int;
pub const DeviceType_t_HPS_CF2000: DeviceType_t = 0;
pub const DeviceType_t_HPS_CF3000: DeviceType_t = 1;
pub const DeviceType_t_HPS_CF4000: DeviceType_t = 2;
pub const DeviceType_t_HPS_CF3000Lite: DeviceType_t = 3;
pub type DeviceType_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SC_ResultDataTypeDef_t {
    pub channelIndex: ::std::os::raw::c_int,
    pub saturation: f32,
    pub resultLen: ::std::os::raw::c_int,
    pub result: [f32; 10usize],
    pub distanceNumber: ::std::os::raw::c_int,
    pub distance: [f32; 20usize],
    pub signal: u64,
    pub signalLength: ::std::os::raw::c_int,
    pub triggerCount: i32,
    pub triggerCount1: i32,
    pub triggerCount2: i32,
    pub bTriggerPass: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SC_ResultDataTypeDef_t"][::std::mem::size_of::<SC_ResultDataTypeDef_t>() - 168usize];
    ["Alignment of SC_ResultDataTypeDef_t"]
        [::std::mem::align_of::<SC_ResultDataTypeDef_t>() - 8usize];
    ["Offset of field: SC_ResultDataTypeDef_t::channelIndex"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, channelIndex) - 0usize];
    ["Offset of field: SC_ResultDataTypeDef_t::saturation"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, saturation) - 4usize];
    ["Offset of field: SC_ResultDataTypeDef_t::resultLen"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, resultLen) - 8usize];
    ["Offset of field: SC_ResultDataTypeDef_t::result"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, result) - 12usize];
    ["Offset of field: SC_ResultDataTypeDef_t::distanceNumber"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, distanceNumber) - 52usize];
    ["Offset of field: SC_ResultDataTypeDef_t::distance"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, distance) - 56usize];
    ["Offset of field: SC_ResultDataTypeDef_t::signal"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, signal) - 136usize];
    ["Offset of field: SC_ResultDataTypeDef_t::signalLength"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, signalLength) - 144usize];
    ["Offset of field: SC_ResultDataTypeDef_t::triggerCount"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, triggerCount) - 148usize];
    ["Offset of field: SC_ResultDataTypeDef_t::triggerCount1"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, triggerCount1) - 152usize];
    ["Offset of field: SC_ResultDataTypeDef_t::triggerCount2"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, triggerCount2) - 156usize];
    ["Offset of field: SC_ResultDataTypeDef_t::bTriggerPass"]
        [::std::mem::offset_of!(SC_ResultDataTypeDef_t, bTriggerPass) - 160usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MC_ResultDataTypeDef_t {
    pub groupIndex: ::std::os::raw::c_int,
    pub channelResult: [SC_ResultDataTypeDef_t; 4usize],
    pub thickness: f32,
    pub resultLen: ::std::os::raw::c_int,
    pub triggerCount: i32,
    pub triggerCount1: i32,
    pub triggerCount2: i32,
    pub bTriggerPass: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MC_ResultDataTypeDef_t"][::std::mem::size_of::<MC_ResultDataTypeDef_t>() - 704usize];
    ["Alignment of MC_ResultDataTypeDef_t"]
        [::std::mem::align_of::<MC_ResultDataTypeDef_t>() - 8usize];
    ["Offset of field: MC_ResultDataTypeDef_t::groupIndex"]
        [::std::mem::offset_of!(MC_ResultDataTypeDef_t, groupIndex) - 0usize];
    ["Offset of field: MC_ResultDataTypeDef_t::channelResult"]
        [::std::mem::offset_of!(MC_ResultDataTypeDef_t, channelResult) - 8usize];
    ["Offset of field: MC_ResultDataTypeDef_t::thickness"]
        [::std::mem::offset_of!(MC_ResultDataTypeDef_t, thickness) - 680usize];
    ["Offset of field: MC_ResultDataTypeDef_t::resultLen"]
        [::std::mem::offset_of!(MC_ResultDataTypeDef_t, resultLen) - 684usize];
    ["Offset of field: MC_ResultDataTypeDef_t::triggerCount"]
        [::std::mem::offset_of!(MC_ResultDataTypeDef_t, triggerCount) - 688usize];
    ["Offset of field: MC_ResultDataTypeDef_t::triggerCount1"]
        [::std::mem::offset_of!(MC_ResultDataTypeDef_t, triggerCount1) - 692usize];
    ["Offset of field: MC_ResultDataTypeDef_t::triggerCount2"]
        [::std::mem::offset_of!(MC_ResultDataTypeDef_t, triggerCount2) - 696usize];
    ["Offset of field: MC_ResultDataTypeDef_t::bTriggerPass"]
        [::std::mem::offset_of!(MC_ResultDataTypeDef_t, bTriggerPass) - 700usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventCallbackArgs_t {
    pub eventType: EventTypeDef,
    pub data: *mut ::std::os::raw::c_void,
    pub dataLen: ::std::os::raw::c_int,
    pub rid: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EventCallbackArgs_t"][::std::mem::size_of::<EventCallbackArgs_t>() - 24usize];
    ["Alignment of EventCallbackArgs_t"][::std::mem::align_of::<EventCallbackArgs_t>() - 8usize];
    ["Offset of field: EventCallbackArgs_t::eventType"]
        [::std::mem::offset_of!(EventCallbackArgs_t, eventType) - 0usize];
    ["Offset of field: EventCallbackArgs_t::data"]
        [::std::mem::offset_of!(EventCallbackArgs_t, data) - 8usize];
    ["Offset of field: EventCallbackArgs_t::dataLen"]
        [::std::mem::offset_of!(EventCallbackArgs_t, dataLen) - 16usize];
    ["Offset of field: EventCallbackArgs_t::rid"]
        [::std::mem::offset_of!(EventCallbackArgs_t, rid) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct version_t {
    pub year: ::std::os::raw::c_uchar,
    pub month: ::std::os::raw::c_uchar,
    pub day: ::std::os::raw::c_uchar,
    pub major: ::std::os::raw::c_uchar,
    pub minor: ::std::os::raw::c_uchar,
    pub rev: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of version_t"][::std::mem::size_of::<version_t>() - 6usize];
    ["Alignment of version_t"][::std::mem::align_of::<version_t>() - 1usize];
    ["Offset of field: version_t::year"][::std::mem::offset_of!(version_t, year) - 0usize];
    ["Offset of field: version_t::month"][::std::mem::offset_of!(version_t, month) - 1usize];
    ["Offset of field: version_t::day"][::std::mem::offset_of!(version_t, day) - 2usize];
    ["Offset of field: version_t::major"][::std::mem::offset_of!(version_t, major) - 3usize];
    ["Offset of field: version_t::minor"][::std::mem::offset_of!(version_t, minor) - 4usize];
    ["Offset of field: version_t::rev"][::std::mem::offset_of!(version_t, rev) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KalmanFilterPara_t {
    pub kalman_k: f32,
    pub kalman_threshold: f32,
    pub num_check: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KalmanFilterPara_t"][::std::mem::size_of::<KalmanFilterPara_t>() - 12usize];
    ["Alignment of KalmanFilterPara_t"][::std::mem::align_of::<KalmanFilterPara_t>() - 4usize];
    ["Offset of field: KalmanFilterPara_t::kalman_k"]
        [::std::mem::offset_of!(KalmanFilterPara_t, kalman_k) - 0usize];
    ["Offset of field: KalmanFilterPara_t::kalman_threshold"]
        [::std::mem::offset_of!(KalmanFilterPara_t, kalman_threshold) - 4usize];
    ["Offset of field: KalmanFilterPara_t::num_check"]
        [::std::mem::offset_of!(KalmanFilterPara_t, num_check) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceInfo_t {
    pub serverIndex: ::std::os::raw::c_int,
    pub descriptor: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DeviceInfo_t"][::std::mem::size_of::<DeviceInfo_t>() - 68usize];
    ["Alignment of DeviceInfo_t"][::std::mem::align_of::<DeviceInfo_t>() - 4usize];
    ["Offset of field: DeviceInfo_t::serverIndex"]
        [::std::mem::offset_of!(DeviceInfo_t, serverIndex) - 0usize];
    ["Offset of field: DeviceInfo_t::descriptor"]
        [::std::mem::offset_of!(DeviceInfo_t, descriptor) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ControllerGEPara_t {
    pub controllerIp: *mut ::std::os::raw::c_char,
    pub controllerMAC: *mut ::std::os::raw::c_char,
    pub controllerPort: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ControllerGEPara_t"][::std::mem::size_of::<ControllerGEPara_t>() - 24usize];
    ["Alignment of ControllerGEPara_t"][::std::mem::align_of::<ControllerGEPara_t>() - 8usize];
    ["Offset of field: ControllerGEPara_t::controllerIp"]
        [::std::mem::offset_of!(ControllerGEPara_t, controllerIp) - 0usize];
    ["Offset of field: ControllerGEPara_t::controllerMAC"]
        [::std::mem::offset_of!(ControllerGEPara_t, controllerMAC) - 8usize];
    ["Offset of field: ControllerGEPara_t::controllerPort"]
        [::std::mem::offset_of!(ControllerGEPara_t, controllerPort) - 16usize];
};
pub type UserEventCallbackHandle = ::std::option::Option<
    unsafe extern "C" fn(
        handler: DeviceHandle_t,
        arg: EventCallbackArgs_t,
        userPara: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    #[doc = " CF_ScanDeviceList\n  扫描传感器设备列表,适用于USB3.0系列控制器\n INPUT:\n\tdevList:\t\t返回当前所有设备\n\tdeviceNumber:\t返回设备个数\n\tRETURN:\t\t\t返回错误码"]
    pub fn CF_ScanDeviceList(
        devList: *mut *mut DeviceInfo_t,
        deviceNumber: *mut ::std::os::raw::c_int,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_OpenDevice\n\t打开指定的光谱仪设备,适用于USB3.0系列控制器\n INPUT:\n\tdevice:\t\t\t用户指定的传感器设备\n\tdeviceHandler:\t返回该设备的句柄\n   mode:           DeviceType_t设备型号\n\tRETURN:\t\t\t返回错误码"]
    pub fn CF_OpenDevice(
        device: *mut DeviceInfo_t,
        deviceHandler: *mut DeviceHandle_t,
        model: DeviceType_t,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_GE_openDevice\n\t打开指定的光谱仪设备,适用于以太网系列控制器\n INPUT:\n\tcontrollerPara: 控制器以太网通信参数，如果设置为NULL则使用控制器固定的通信参数进行连接\n   localIP:        地IP，如果设置为NULL则使用INADDR_ANY绑定本机的所有IP\n\tdeviceHandler:  返回该设备的句柄\n   mode:           DeviceType_t设备型号\n   RETURN:         返回错误码"]
    pub fn CF_GE_OpenDevice(
        controllerPara: *mut ControllerGEPara_t,
        localIP: *mut ::std::os::raw::c_char,
        deviceHandler: *mut DeviceHandle_t,
        model: DeviceType_t,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_SetFactoryFilePath\n\t设置出厂配置文件搜索路径，适用于CF3000Lite版本控制器;不设置默认在程序运行目录下搜索\n INPUT:\n\tpath:出厂配置文件搜索路径"]
    pub fn CF_SetFactoryFilePath(path: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[doc = " closeDevice\n\t关闭指定的传感器设备\n INPUT:\n\thandle:\t用户指定的传感器设备handle\n   RETURN: 返回错误码"]
    pub fn CF_CloseDevice(handle: DeviceHandle_t);
}
unsafe extern "C" {
    #[doc = " CF_StartSample\n\t启动传感器采集,采集的测量结果通过回调函数返回或通过调用CF_GetLatestResult/CF_GetLatestResult_MC获取最新的测量结果\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n   en：\t\t\t  true:启动采集      false:停止采集\n\tRETURN:\t\t  返回错误码"]
    pub fn CF_StartSample(handle: DeviceHandle_t, en: bool) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_Zero\n\t对传感器测量值进行归零\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n   channelIndex：通道索引。单头模式下，该索引取值为0~3，对应4个通道传感头；在双头测厚度非标定模式下，该索引取值为0~1，对应两组双头测量\n\tRETURN:\t\t  返回错误码"]
    pub fn CF_Zero(handle: DeviceHandle_t, channelIndex: ::std::os::raw::c_int) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_RegisterEventCallback\n\t注册总的事件回调函数，连续采集的测量结果/函数调用异常信息通过回调函数通知\n INPUT:\n\teventHandler:回调函数\n\tuserPara    :用户数据\n   RETURN:"]
    pub fn CF_RegisterEventCallback(
        eventHandler: UserEventCallbackHandle,
        userPara: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[doc = " CF_GetLatestResult\n\t获取一帧最新的测量值\n INPUT:\n\thandle:\t\t用户指定的传感器设备handle\n\tres:\t\t返回所有已激活通达的测量值\n\tlen:\t\t返回测量结果个数\n   RETURN:\t\t返回错误码"]
    pub fn CF_GetLatestResult(
        handle: DeviceHandle_t,
        res: *mut SC_ResultDataTypeDef_t,
        len: *mut ::std::os::raw::c_int,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_GetLatestResult_MC\n\t双头测厚模式下获取一帧最新的测量值\n INPUT:\n\thandle:\t用户指定的传感器设备handle\n\tres:\t返回所有已激活通达的测量值\n\tlen:\t返回测量结果个数\n   RETURN:\t返回错误码"]
    pub fn CF_GetLatestResult_MC(
        handle: DeviceHandle_t,
        res: *mut MC_ResultDataTypeDef_t,
        len: *mut ::std::os::raw::c_int,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_DarkSignal\n\t消除传感器背景光信号,传感器启动测量前需要先消除背景光信号（将传感器移动到量程外，执行dark操作）。默认出厂已经对传感器执行dark操作，并保存到控制器中。\n INPUT:\n\thandle:        用户指定的传感器设备handle\n\tchannel:       通道,小于0则消除所有通道的dark信号\n   presetExpTime: true:消除所有预设曝光时间的dark信号,并将数据保存到运行目录,下次运行程序无需进行dark操作；\n                  false:采集当前曝光时间的dark信号，dark数据在SDK断开连接后失效，下次连接SDK需要重新进行dark\n   RETURN: 返回错误码"]
    pub fn CF_DarkSignal(
        handle: DeviceHandle_t,
        channel: ::std::os::raw::c_int,
        presetExpTime: bool,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_ExportCacheData\n\t将Cache里面的所有数据都获取出来，用户通过参数PARAM_CACHE_DATA_CNT获取当前Cache里面有多少个数据，在开辟好内存空间将数据获取出去;\n   通过参数 PARAM_CACHE_CLEAR 可以将Cacnhe内部数据清空\n INPUT:\n\thandle\t\t:用户指定的传感器设备handle\n\tcacheIndex: ：缓存的索引(0~3)对应4个通道\n\tdata\t\t: 返回的数据\n   maxDataCount: 读取的最大长度\n\tdataCount\t：返回的实际读取的数据长度\n   RETURN: 返回错误码"]
    pub fn CF_ExportCacheData(
        handle: DeviceHandle_t,
        cacheIndex: ::std::os::raw::c_int,
        retData: *mut f64,
        maxCount: ::std::os::raw::c_int,
        dataCount: *mut i32,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_SaveSetting\n\t保存当前用户配置到控制器中\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n RETURN:\t\t  返回错误码"]
    pub fn CF_SaveSetting(handle: DeviceHandle_t) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_RestoreFactorySetting\n\t恢复出厂配置\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n  RETURN:\t\t  返回错误码"]
    pub fn CF_RestoreFactorySetting(handle: DeviceHandle_t) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_ExportUserSetting\n\t导出传感器配置文件\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n\tpath：\t\t  导出路径\n   RETURN:\t\t  返回错误码"]
    pub fn CF_ExportUserSetting(
        handle: DeviceHandle_t,
        path: *const ::std::os::raw::c_char,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_ImportUserSetting\n\t导入传感器配置文件\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n\tpath：\t\t  配置文件名\n   RETURN:\t\t  返回错误码"]
    pub fn CF_ImportUserSetting(
        handle: DeviceHandle_t,
        pathName: *const ::std::os::raw::c_char,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_SetIntParam\n\t设置Int类型参数\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n\tparamName：\t  参数名， 参数名，包含的参数可以参考CF_ParamterDefine.h文件\n   channelIndex：通道索引，若是全局参数则该值填0即可，内部不做判断\n   RETURN:\t\t  返回错误码"]
    pub fn CF_SetIntParam(
        handle: DeviceHandle_t,
        paramName: *const ::std::os::raw::c_char,
        channelIndex: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_SetFloatParam\n\t设置Float类型参数\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n\tparamName：\t  参数名， 参数名，包含的参数可以参考CF_ParamterDefine.h文件\n   channelIndex：通道索引，若是全局参数则该值填0即可，内部不做判断\n   RETURN:\t\t  返回错误码"]
    pub fn CF_SetFloatParam(
        handle: DeviceHandle_t,
        paramName: *const ::std::os::raw::c_char,
        channelIndex: ::std::os::raw::c_int,
        value: f32,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_SetStringParam\n\t设置String类型参数\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n\tparamName：\t  参数名， 参数名，包含的参数可以参考CF_ParamterDefine.h文件\n   channelIndex：通道索引，若是全局参数则该值填0即可，内部不做判断\n\tRETURN:\t\t  返回错误码"]
    pub fn CF_SetStringParam(
        handle: DeviceHandle_t,
        paramName: *const ::std::os::raw::c_char,
        channelIndex: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_GetIntParam\n\t获取Int类型参数值\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n\tparamName：\t  参数名， 参数名，包含的参数可以参考CF_ParamterDefine.h文件\n   channelIndex：通道索引，若是全局参数则该值填0即可，内部不做判断\n\tRETURN:\t\t  返回错误码"]
    pub fn CF_GetIntParam(
        handle: DeviceHandle_t,
        paramName: *const ::std::os::raw::c_char,
        channelIndex: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_GetFloatParam\n\t获取Float类型参数值\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n\tparamName：\t  参数名， 参数名，包含的参数可以参考CF_ParamterDefine.h文件\n   channelIndex：通道索引，若是全局参数则该值填0即可，内部不做判断\n   RETURN: 返回错误码"]
    pub fn CF_GetFloatParam(
        handle: DeviceHandle_t,
        paramName: *const ::std::os::raw::c_char,
        channelIndex: ::std::os::raw::c_int,
        value: *mut f32,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_GetStringParam\n\t获取String类型参数值\n INPUT:\n\thandle:\t\t  用户指定的传感器设备handle\n\tparamName：\t  参数名， 参数名，包含的参数可以参考CF_ParamterDefine.h文件\n   channelIndex：通道索引，若是全局参数则该值填0即可，内部不做判断\n   RETURN:\t\t  返回错误码"]
    pub fn CF_GetStringParam(
        handle: DeviceHandle_t,
        paramName: *const ::std::os::raw::c_char,
        channelIndex: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_BindInputPort\n\t设置外部触发IO的功能\n INPUT:\n\thandle:\t\t\t\t\t\t用户指定的传感器设备handle\n\tConfocal_InputPortFunc_t:\t用户指定触发功能\n\tChannel：\t\t\t\t\t该IO口关联的通道\n   inputPort:\t\t\t\t\t输入口\n   RETURN:\t\t\t\t\t\t返回错误码"]
    pub fn CF_BindInputPort(
        handle: DeviceHandle_t,
        Channel: ::std::os::raw::c_int,
        func: Confocal_InputPortFunc_t,
        inputPort: ::std::os::raw::c_int,
    ) -> StatusTypeDef;
}
unsafe extern "C" {
    #[doc = " CF_UnbindInputPort\n\t将指定输入IO口解绑\n INPUT:\n  handle:\t\t\t\t用户指定的传感器设备handle\n  inputPort:\t\t\t输入口\n  RETURN:\t\t\t    返回错误码"]
    pub fn CF_UnbindInputPort(
        handle: DeviceHandle_t,
        inputPort: ::std::os::raw::c_int,
    ) -> StatusTypeDef;
}
